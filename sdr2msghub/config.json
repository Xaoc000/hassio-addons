{
  "name": "Open Horizon Shared SDR",
  "url": "https://github.com/dcmartin/hassio-addons",
  "version": "0.0.61",
  "slug": "sdr2msghub",
  "description": "Routes Kakfa messages from Open Horizon (github.com/open-horizon) distributed system to MQTT for consumption by Home-Assistant",
  "startup": "before",
  "boot": "auto",
  "arch": [
    "aarch64",
    "amd64",
    "armhf",
    "i386"
  ],
  "hassio_role": "default",
  "hassio_api": true,
  "homeassistant_api": true,
  "host_network": true,
  "privileged": [
    "NET_ADMIN",
    "SYS_ADMIN"
  ],
  "full_access": false,
  "host_pid": false,
  "docker_api": false,
  "timeout": 90,
  "map": [
    "share:rw",
    "config:rw"
  ],
  "options": {
    "log_level": "info",
    "timezone": "America/Los_Angeles",
    "horizon": {
      "device": "",
      "token": "",
      "username": "",
      "password": "",
      "exchange": "",
      "organization": ""
    },
    "mqtt": {
      "host": "",
      "port": 1883
    },
    "watson_stt": {},
    "watson_nlu": {},
    "kafka": {}
  },
  "schema": {
    "log_level": "match(^(trace|debug|info|notice|warning|error|fatal)$)",
    "pattern": "str?",
    "timezone": "str?",
    "listen": "bool?",
    "mock": "bool?",
    "horizon": {
      "device": "str",
      "token": "str",
      "username": "str",
      "password": "str",
      "exchange": "url",
      "organization": "str"
    },
    "mqtt": {
      "host": "str?",
      "port": "port?",
      "username": "str?",
      "password": "str?",
      "topic": "str?"
    },
    "watson_stt": {
      "url": "str",
      "apikey": "str?",
      "username": "str?",
      "password": "str?"
    },
    "watson_nlu": {
      "url": "str",
      "apikey": "str?",
      "username": "str?",
      "password": "str?"
    },
    "kafka": {
      "user": "str",
      "password": "str",
      "instance_id": "str",
      "mqlight_lookup_url": "url",
      "api_key": "str",
      "kafka_admin_url": "url",
      "kafka_rest_url": "url",
      "kafka_brokers_sasl": [
        "str",
        "str?",
        "str?",
        "str?",
        "str?"
      ]
    }
  },
  "environment": {
    "LOG_FORMAT": "{LEVEL}: {MESSAGE}"
  }
}
